*** non-sequitur
instead of production rules use functions
**** analogs
***** start rule
need a function that returns seen data as a list
every new character is appended to the return value
***** digram uniqueness
****** what is the limitation on repetition we want to enforce?
only abstractions that don't increase size
***** rule utility
if there is only one rule application inline the body of the function
**** pseudo-code
follow structure of http://www.sequitur.info/js/main.js

***** program
****** create an initial function S that returns an empty list
****** loop through the data token by token
******* take the current character and modify the S function
append the current character to the end of the return value
******* check if there can be a compression
is it possible for there to be an anti-unification that is better than an application?
******** unification (function application)
first check if any existing rules can be applied if there is one that compresses then apply it
********* check for existing applications
********** brute force
for each function existing see if there is an application and get the resulting sizes
*********** loop through the functions in the environment
************ examples
f(x) -> [1, 2, x, 2, x]

************ for each character in the body of S see if there is an application at that point
************* pass the function and the body of S starting at the current character to unify
return the unified expression along with variable bindings
also think about how to have partial unification since that is how inference will work

for now follow http://www.cs.rit.edu/~anh/UnificationIntro.pdf or an algorithm similar to https://github.com/stuhlmueller/abstract/blob/master/abstract.ss#L359

but there may be a need for higher-order unification see http://stackoverflow.com/a/1955735

essentially check for deep equality, but allow variables in the function body to be wildcards
************** questions
*************** is it possible the initial environment is non-empty?
let's say no for now...every time we start unification it's to see a a function a can be applied in the body of b so there's no context

target_function is the body of some function, so there may be variables, but these would be treated as constants

[x 1 [+ 1 2]]
[y 1 [+ 2 3]]

unified...
[z1 1 [+ z2 z3]]

f(x) = z(x, 1, 2)
g(y) = z(y, 2, 3)
************** examples
*************** unification exists
**************** f has no variables
F() -> [a b [G d] c]
data [a b c c]
unification if [G d] => c
**************** f has variables
F(x) -> [a b [G x] c]
data [a b c c]
**************** f has the same variable in multiple places

************** pseudo-code
************* getting the resulting size
compute the sizes of the unifications and return the smallest one that is smaller than the original size


********** continuous tracking
with each character keep track of possible applications
********* determine compression
******** anti-unification (create a new function)
after compressing via any applicable rules see if there is any compression via anti-unification in sequitur this happened by keeping a dictionary of digrams to determine when there was a match

here rather than matching two characters we need to see if enough characters match to get compression

when a function changes we'll try to anti-unify that function with itself and other functions


******** function utility
after unifications and antiunifications check that all functions are used in more than one place or give compression
****** output the final program
***** data structures
****** expressions
limit the language to functions and values
******* functions
we need to represent functions so they are easy to evaluate and define
http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_sec_4.1.3
******** evaluation
replace variables with the called arguments in the body

if the body is a value then return the value

else if the body is a function call then evaluate the arguments then return the evaluated body of the called function with the evaluated arguments
******** representation
does it make sense to represent functions as a class or a list? perhaps if we can't perform abstraction on the total program (function definitions included) we lose some power

for now don't since sequitur does not
********* name
a variable
********* arguments
********* body
a list, either a function call or a primitive value
******* variables
should be able to be initialized with a prefix
******* environment
contains mappings for variables to functions
a hash table where keys are variables

http://stackoverflow.com/questions/4901815/object-of-custom-type-as-dictionary-key
****** Data
we'll keep data as a list of tokens for now
**** testing
***** find_best
make sure the first part of [1, 1, 1, 1, 2, 2, 2] unifies with [1, 1, 1, 1]
also [2, 2, 2] unifies with the tail of [1, 1, 1, 1, 2, 2, 2]
**** patterns
***** abacdcefe or even abacbcdbdebe
no duplicate bigrams, but
f(x,y) = xyx is a pattern
